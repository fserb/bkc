---
layout: effect
title: Bouncing Crystal
draft: true
---

<script type="module">
const canvas = document.querySelector("canvas");

const {rgba} = await import("{{baseURL}}extend.js");

const ctx = canvas.getContext("2d");
const W = canvas.width = 1920;
const H = canvas.height = 1080;
const BG = [16, 16, 16];

const COLORS = [
  [190, 38, 51],
  [224, 111, 139],
  [73, 60, 43],
  [164, 100, 34],
  [235, 137, 49],
  [247, 226, 107],
  [47, 72, 78],
  [68, 137, 26],
  [163, 206, 39],
  [0, 87, 132],
  [49, 162, 242],
  [178, 220, 239],
];
let CC = Math.floor(Math.random() * COLORS.length);
function nextColor() {
  CC = (CC + 1) % COLORS.length;
  return CC;
}

const crystal = {
  control: [],
  pulse: 1.0,
};
let shaketime = 0.0;
let shakedir = {x: 0.0, y: 0.0};
const particles = [];

for (let i = 0; i < 2; ++i) {
  const speed = 700 + 400 * Math.random();
  const vdir = Math.TAU * Math.random();
  crystal.control.push({
    pos: {x: W * Math.random(), y: H * Math.random()},
    vel: {x: speed * Math.cos(vdir), y: speed * Math.sin(vdir)},
    radius: 64,
    bounced: false,
    color: nextColor(),
  });
}

function newParticle(pos, vel, color) {
  const speed = Math.hypot(vel.x, vel.y) * (0.25 + 1.25 * Math.random());
  const vangle = Math.TAU * Math.random();

  return {
    pos: {x: pos.x, y: pos.y },
    vel: { x: speed * Math.cos(vangle), y: speed * Math.sin(vangle)},
    angle: Math.TAU * Math.random(),
    rot: -4 + 8 * Math.random(),
    color: color,
    life: Math.random() * 1,
    radius: 0,
  };
}

function updateParticles(dt) {
  for (const p of particles) {
    p.pos.x += p.vel.x * dt;
    p.pos.y += p.vel.y * dt;
    p.angle += p.life * p.rot * dt;
    bounce(p);
    p.life -= dt;
    p.radius = 125 * p.life;
  }
  particles.filterIn(e => e.life > 0);
}

function bounce(obj) {
  let bounced = false;
  if (obj.pos.x <= obj.radius || obj.pos.x >= W - obj.radius) {
    obj.vel.x = -obj.vel.x;
    obj.pos.x = Math.clamp(obj.pos.x, obj.radius, W - obj.radius);
    bounced = true;
  }
  if (obj.pos.y <= obj.radius || obj.pos.y >= H - obj.radius) {
    obj.vel.y = -obj.vel.y;
    obj.pos.y = Math.clamp(obj.pos.y, obj.radius, H - obj.radius);
    bounced = true;
  }
  return bounced;
}

function updateCollision(a, b) {
  const col = { x: b.pos.x - a.pos.x, y: b.pos.y - a.pos.y};
  const distance = Math.hypot(col.x, col.y);
  if (distance > a.radius + b.radius) return;

  if (distance > 0) {
    col.x /= distance;
    col.y /= distance;
  } else {
    col.x = 1;
    col.y = 0;
  }

  const overlap = a.radius + b.radius - distance;
  a.pos.x -= col.x * overlap / 2;
  a.pos.y -= col.y * overlap / 2;
  b.pos.x += col.x * overlap / 2;
  b.pos.y += col.y * overlap / 2;

  const colvel = (b.vel.x - a.vel.x) * col.x + (b.vel.y - a.vel.y) * col.y;
  a.vel.x += colvel * col.x;
  a.vel.y += colvel * col.y;
  b.vel.x -= colvel * col.x;
  b.vel.y -= colvel * col.y;

  a.bounced = true;
  b.bounced = true;
}
function updateBGWith(r, g, b) {
  BG[0] = 16 + 16 * (r / 255);
  BG[1] = 16 + 16 * (g / 255);
  BG[2] = 16 + 16 * (b / 255);
}

function update(dt, t) {
  crystal.pulse = Math.sin(t * 5);

  for (const c of crystal.control) {
    c.pos.x += c.vel.x * dt;
    c.pos.y += c.vel.y * dt;
    if (bounce(c)) {
      c.bounced = true;
    }
  }
  updateCollision(crystal.control[0], crystal.control[1]);

  for (const c of crystal.control) {
    if (!c.bounced) continue;
    c.bounced = false;
    c.color = nextColor();
    updateBGWith(...COLORS[c.color]);
    shaketime = Math.min(0.4, shaketime + 0.2);
    shakedir = {x: -c.vel.x / 4, y: -c.vel.y / 4};

    for (let i = 0; i < 50; ++i) {
      particles.push(newParticle(c.pos, c.vel, c.color));
    }
  }

  updateParticles(dt);

  for (let i = 0; i < 3; ++i) {
    BG[i] = Math.max(16, BG[i] - 16 * dt);
  }

  shaketime = Math.max(0, shaketime - dt);
}

function renderCrystal(a, b, size, colorA, colorB) {
  const dir = {x: b.x - a.x, y: b.y - a.y};
  const dirlen = Math.hypot(dir.x, dir.y);
  if (dirlen == 0) return;
  dir.x *= size / dirlen;
  dir.y *= size / dirlen;
  const nor = {x: -dir.y, y: dir.x};

  const g = ctx.createLinearGradient(a.x, a.y, b.x, b.y);
  g.addColorStop(0, colorA);
  g.addColorStop(1, colorB);
  ctx.fillStyle = g;

  ctx.beginPath();
  ctx.moveTo(a.x - dir.x, a.y - dir.y);
  ctx.lineTo(a.x + nor.x, a.y + nor.y);
  ctx.lineTo(b.x + nor.x, b.y + nor.y);
  ctx.lineTo(b.x + dir.x, b.y + dir.y);
  ctx.lineTo(b.x - nor.x, b.y - nor.y);
  ctx.lineTo(a.x - nor.x, a.y - nor.y);
  ctx.fill();
}
function renderParticles() {
  for (const p of particles) {
    ctx.fillStyle = rgba(...COLORS[p.color]);
    ctx.save();
    ctx.translate(p.pos.x, p.pos.y);
    ctx.scale(p.radius, p.radius);
    ctx.rotate(p.angle);
    ctx.beginPath();
    ctx.moveTo(0, -1);
    ctx.lineTo(Math.SQRT3 / 2, 0.5);
    ctx.lineTo(-Math.SQRT3 / 2, 0.5);
    ctx.closePath();
    ctx.fill();
    ctx.restore();
  }
}

function render() {
  ctx.reset();
  ctx.fillStyle = rgba(...BG);
  ctx.fillRect(0, 0, W, H);
  ctx.globalCompositeOperation = "screen";

  if (shaketime > 0) {
    ctx.translate(
      shakedir.x * shaketime * Math.random(),
      shakedir.y * shaketime * Math.random());
  }

  renderParticles();

  ctx.globalAlpha = 0.5;
  const colorA = rgba(...COLORS[crystal.control[0].color]);
  const colorB = rgba(...COLORS[crystal.control[1].color]);
  const outer = 60 + 20 * (1 + crystal.pulse);
  renderCrystal(crystal.control[0].pos, crystal.control[1].pos,
    outer, colorA, colorB);
  ctx.globalAlpha = crystal.pulse;
  renderCrystal(crystal.control[0].pos, crystal.control[1].pos,
    outer * Math.abs(crystal.pulse), colorA, colorB);
}

let last = 0;
function frame(ts) {
  ts /= 1000;
  const dt = (ts - last);
  last = ts;
  if (dt === ts) {
    return requestAnimationFrame(frame);
  }

  update(dt, ts);
  render();

  requestAnimationFrame(frame);
}
frame(0);

</script>
