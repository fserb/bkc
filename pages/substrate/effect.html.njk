---
layout: effect
title: Substrate
draft: true
---
<script type="module">
const canvas = document.querySelector("canvas");

const {gridRaystep, normal, Color} = await import("{{baseURL}}/js/extend.js");

const ctx = canvas.getContext("2d");
const W = canvas.width = 1920;
const H = canvas.height = 1080;

const EMPTY = Infinity;
const INVALID = null;

class Substrate {
  constructor() {
    this.totalCracks = 0;
    this.maxTotalCracks = -1;
    this.maxActiveCracks = 128;
    this.cracks = [];
    this.angleVariance = 0.025;

    this.grid = new Array(W * H);
    for (let i = 0; i < W * H; ++i) {
      this.grid[i] = EMPTY;
    }

    this.colors = [];
    this.lineColor = '#000';
  }

  clear(bgColor) {
    ctx.reset();
    ctx.fillStyle = bgColor;
    ctx.fillRect(0, 0, W, H);
  }

  begin({random = 0, start = 0, mask = null}) {
    if (mask !== null) {
      const add = mask.applyMask(this);
      for (const a of add) {
        this.cracks.push(new Crack(this, ...a));
        this.totalCracks++;
      }
    }

    let k = 0;
    while (k < random) {
      const x = Math.random() * W;
      const y = Math.random() * H;
      if (this.get(x, y) !== EMPTY) continue;

      this.set(x, y, Math.random() * Math.TAU);
      k++;
    }

    for (let k = 0; k < start; ++k) {
      this.newCrack();
    }
  }

  update() {
    this.cracks.filterIn(c => {
      if (!c.move()) {
        this.newCrack();
        this.newCrack();
        return false;
      }
      return true;
    });
    return this.cracks.length > 0;
  }

  newCrack() {
    if (this.cracks.length >= this.maxActiveCracks) return;
    if (this.maxTotalCracks >= 0 && this.totalCracks >= this.maxTotalCracks) {
      return;
    }

    let x = 0;
    let y = 0;

    let found = false;
    for (let i = 0; i < W * H; ++i) {
      x = Math.random() * W;
      y = Math.random() * H;
      const p = this.get(x, y);
      if (p != EMPTY && p != INVALID) {
        found = true;
        break;
      }
    }
    if (!found) return;

    const dir = Math.sign(Math.random() - 0.5);
    const variance = this.angleVariance * normal();
    const angle = this.get(x, y) + dir * ((Math.TAU / 4) + variance);

    this.cracks.push(new Crack(this, x, y, angle));
    this.totalCracks++;
  }

  getColor() {
    if (this.colors === null) return null;
    return this.colors[Math.floor(Math.random() * this.colors.length)];
  }

  get(x, y) {
    x = Math.floor(x);
    y = Math.floor(y);
    if (x < 0 || x >= W || y < 0 || y >= H) return INVALID;
    return this.grid[x + y * W];
  }

  set(x, y, v) {
    x = Math.floor(x);
    y = Math.floor(y);
    if (x < 0 || x >= W || y < 0 || y >= H) return;
    this.grid[x + y * W] = v;
  }
}

class Crack {
  constructor(ss, x, y, angle) {
    this.ss = ss;
    this.angle = angle;
    this.pos = gridRaystep({x, y}, this.angle);
    if (this.ss.get(this.pos.x, this.pos.y) === INVALID) {
      this.pos = null;
    }
    this.mod = 0.5 * Math.random();
    this.color = this.ss.getColor();
  }

  move() {
    if (this.pos === null) return false;
    const oldpos = this.pos;
    this.pos = gridRaystep(oldpos, this.angle);

    if (this.color !== null) {
      this.paintRegion();
    }

    for (let i = 0 ; i < 2; ++i) {
      ctx.fillStyle = this.ss.lineColor;
      ctx.fillRect(
        this.pos.x + 0.33 * normal(),
        this.pos.y + 0.33 * normal(),
        1, 1);
    }

    const delta = {
      x: Math.floor(this.pos.x) - Math.floor(oldpos.x),
      y: Math.floor(this.pos.y) - Math.floor(oldpos.y),
    };
    for (let dx = 0; dx <= Math.abs(delta.x); ++dx) {
      for (let dy = 0; dy <= Math.abs(delta.y); ++dy) {
        const v = this.ss.get(
          oldpos.x + Math.sign(delta.x) * dx,
          oldpos.y + Math.sign(delta.y) * dy);
        if (v === INVALID || (v !== EMPTY && v != this.angle)) return false;
      }
    }

    this.ss.set(this.pos.x, this.pos.y, this.angle);
    return true;
  }

  paintRegion() {
    let r = {...this.pos};
    while (true) {
      r = gridRaystep(r, this.angle + Math.TAU / 4);
      const v = this.ss.get(r.x, r.y);
      if (v === INVALID || v != EMPTY) break;
    }

    this.mod = Math.clamp(this.mod + 0.05 * normal(), 0, 1.0);

    const t = {
      x: this.pos.x + (r.x - this.pos.x) * this.mod,
      y: this.pos.y + (r.y - this.pos.y) * this.mod
    };

    const grad = ctx.createLinearGradient(this.pos.x, this.pos.y, t.x, t.y);
    const S = 5;
    for (let i = 0; i < S; ++i) {
      const f = i / (S - 1);
      const a = 0.25 * ((1 - f) ** 0.25);
      grad.addColorStop(f, this.color.alpha(a));
    }
    ctx.strokeStyle = grad;

    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(this.pos.x, this.pos.y);
    ctx.lineTo(t.x, t.y);
    ctx.stroke();
  }
}

class Mask {
  constructor() {
    this.ofc = new OffscreenCanvas(W, H);
    this.ctx = this.ofc.getContext("2d");
    this.ctx.reset();
    this.ctx.fillStyle = "#000";
    this.ctx.fillRect(0, 0, W, H);
    this.ctx.fillStyle = "#FFF";

    this.toAdd = [];
  }

  applyMask(ss) {
    const im = this.ctx.getImageData(0, 0, W, H).data;

    for (let y = 0; y < H; ++y) {
      for (let x = 0; x < W; ++x) {
        const p = (x + y * W) * 4;
        const c = im[p];
        if (c <= 5) {
          ss.set(x, y, INVALID);
        } else if (c >= 250) {
          ss.set(x, y, EMPTY);
        } else if (c >= 10 && c <= 245) {
          ss.set(x, y, Math.TAU * (c - 10) / 235);
        }
      }
    }
    return this.toAdd;
  }

  line(x0, y0, x1, y1) {
    const ang = Math.atan2(y1 - y0, x1 - x0);
    ctx.beginPath();
    ctx.moveTo(x0, y0);
    ctx.lineTo(x1, y1);
    ctx.stroke();
    this.toAdd.push([x0, y0, ang]);
  }

  poly(...points) {
    this.ctx.fillStyle = "#FFF";
    this.ctx.strokeStyle = '#FFF';
    this.ctx.beginPath();
    for (let i = 0; i < points.length; i += 2) {
      const n = (i + 2) % points.length;
      this.ctx.lineTo(points[i], points[i+1]);
      this.line(points[i], points[i+1], points[n], points[n+1]);
    }
    this.ctx.closePath();
    this.ctx.fill();
    this.ctx.stroke();
  }
}

function basicEffect(ss) {
  ss.clear('#FFFFFF');
  ss.lineColor = '#3B2618';
  ss.maxTotalCracks = 12000;
  // const colors = Color('#000000').steps(256, '#FFFF00');
  // for (let i = 0; i < colors.length; ++i) {
  //   const f = i / (colors.length - 1);
  //   colors[i] = colors[i].luminance(f ** 1.2)
  //     .saturate(2 * Math.abs(Math.sin(f * 7)))
  //     .rotate(-40 + 50 * (Math.cos(f * 5)))
  //     .multiply(Color('#FFFF0050'))
  // }
  // ss.colors = colors;
  // console.log(colors.map(x => x.toHex()).join(', '));

  ss.colors = null;

  ss.begin({start: 3, random: 16});
}

function blueDiamond(ss) {
  const colors = Color('#000000').steps(256, '#00AAFF');
  for (let i = 0; i < colors.length; ++i) {
    const f = i / (colors.length - 1);
    colors[i] = colors[i].luminance((f * 0.9) ** 1.2)
      .saturate(4 * Math.abs(Math.sin(f * 7)))
      .multiply(Color('#FF00FF40'))
  }
  ss.colors = colors;
  ss.clear('#FFFFFF');
  ss.lineColor = '#323E51AA';
  ss.maxTotalCracks = 4000;
  ss.maxActiveCracks = 64;

  ctx.strokeStyle = ss.lineColor;
  const m = new Mask();
  m.poly(960, 88, 1177, 273, 1177, 549, 1177, 825, 960, 993, 742, 825, 742, 549, 742, 273);
  ss.begin({mask: m});
}

function cube(ss) {
  ss.colors = null;
  ss.clear('#FFFFFF');
  ss.lineColor = ctx.strokeStyle = '#083648';
  ss.maxTotalCracks = 1000;

  const m = new Mask();
  m.poly(964,167, 1288,353, 964,545, 638,353);
  m.poly(1288,353, 1288,739, 964,923, 964,545);
  m.poly(638,353, 964,545, 964,923, 638, 739);
  ss.begin({mask: m, random: 16});
}

function area(ss) {
  ss.clear('#FFF');
  ss.maxTotalCracks = 4000;
  ss.maxActiveCracks = 32;
  ss.lineColor = ctx.strokeStyle = '#083648';
  ss.angleVariance = 0;

  const colors = Color('#28C9FF').steps(64, '#E313AF');
  for (let i = 0; i < colors.length; ++i) {
    const f = i / (colors.length - 1);
    colors[i] = colors[i].luminance(Math.abs(Math.sin(f * 4)) * 0.65)
      .saturate(0.25 * Math.abs(Math.sin(f * 7)))
  }
  ss.colors = colors;

  const m = new Mask();
  const a = 50;
  const b = 200;

  m.poly(a + b, a,
    W - a, a,
    W - a, H - a - b,
    W - a - b, H - a,
    a, H - a,
    a, a + b);

  ss.begin({mask: m});
}

function bezier(ss) {
  ss.maxTotalCracks = 10000;
  ss.maxActiveCracks = 400;
  ss.angleVariance = 0;

  const c = Color(`hsv(${Math.random() * 360}, 50, 75)`);
  ss.colors = Color(c.luminance(0.05)).steps(32, c.luminance(0.8));
  ss.lineColor = ctx.strokeStyle = c.luminance(0.025);
  ss.clear(c.makeComplement().luminance(0.9));

  function bezier(t, coefs) {
    const layer = [...coefs];
    for (let j = 1; j < layer.length; ++j) {
      for (let k = 0; k < layer.length - j; ++k) {
        layer[k] = layer[k] * (1 - t) + layer[k + 1] * t;
      }
    }
    return layer[0];
  }

  const m = new Mask();

  ctx.strokeStyle = "rgba(255,0,0,0.05)";

  const p = [
    [240 * Math.random(), Math.random() * H],
    [240 + 720 * Math.random(), H * (-0.25 + 1.5 * Math.random())],
    [960 + 720 * Math.random(), H * (-0.25 + 1.5 * Math.random())],
    [1680 + 240 * Math.random(), Math.random() * H]];

  const points = [];
  const TOTAL = 40000;
  for (let t = 0; t < TOTAL; ++t) {
    const f = t / TOTAL;
    const x = bezier(f, [p[0][0], p[1][0], p[2][0], p[3][0]]);
    const y = bezier(f, [p[0][1], p[1][1], p[2][1], p[3][1]]);

    const dx = 4 * (bezier(f, [p[1][0], p[2][0], p[3][0]]) -
      bezier(f, [p[0][0], p[1][0], p[2][0]]));
    const dy = 4 * (bezier(f, [p[1][1], p[2][1], p[3][1]]) -
      bezier(f, [p[0][1], p[1][1], p[2][1]]));

    points.push([x, y, dx, dy]);
  }
  ctx.strokeStyle = "#000";
  ctx.lineWidth = 2;
  ctx.beginPath();
  for (const p of points) {
    ctx.lineTo(p[0], p[1]);
  }
  ctx.stroke();
  ctx.lineWidth = 1;

  m.ctx.fillRect(0, 0, W, H);
  for (const p of points) {
    const ang = (Math.atan2(p[3], p[2]) + Math.TAU) % Math.TAU;
    const r = Math.round(235 * (ang / Math.TAU) + 10);
    m.ctx.fillStyle = `rgb(${r}, 0, 0)`;
    m.ctx.fillRect(Math.floor(p[0]), Math.floor(p[1]), 1, 1);
  }

  ss.begin({mask: m, start: 32});
}

const ss = new Substrate();
// basicEffect(ss);
// blueDiamond(ss);
// cube(ss);
// area(ss);
bezier(ss);

function frame() {
  if (ss.update()) {
    requestAnimationFrame(frame);
  }

  // const r = [432,347,20,20];

  // ctx.strokeStyle = 'red';
  // ctx.strokeRect(...r);

  // for (let x = r[0]; x < r[0] + r[2]; x++) {
  //   for (let y = r[1]; y < r[1] + r[3]; y++) {
  //     const g = ss.grid[x + y * W];
  //     const px = 900 + (x - r[0]) * 50;
  //     const py = 50 + (y - r[1]) * 50;
  //     ctx.textAlign = "center";
  //     ctx.textBaseline = "middle";

  //     ctx.fillStyle = "#FFF";
  //     ctx.fillRect(px, py, 50, 50);
  //     ctx.strokeRect(px, py, 50, 50);

  //     ctx.fillStyle = "#000";

  //     let val = "";
  //     if (val != EMPTY) {
  //       val = Math.round(360 * g / Math.TAU);
  //     }

  //     ctx.fillText(val, px + 25, py + 25);

  //   }
  // }


}
frame();
</script>
